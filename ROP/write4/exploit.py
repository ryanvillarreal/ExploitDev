#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './write4'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break *0x400804
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

# initialize
io = start()


# grab the first line and then send our line
io.recv()
io.sendline(cyclic(0x200))
io.wait()


# get core file and let's read in the values at time of crash
core = io.corefile
stack = core.rbp
print cyclic_find(hex(stack))
print hex(stack)
#pattern_offset = cyclic_find(pattern)

#if pattern_offset <= 0:
#    print "Couldn't find the offset"
#else:
#    print "Pattern offset: %i" % pattern_offset

#print stack
#print core.registers


io.interactive()

